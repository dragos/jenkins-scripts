From b1620a60ec2bddc439cf9142094d870c8dc250c4 Mon Sep 17 00:00:00 2001
From: Eugene Burmako <xeno.by@gmail.com>
Date: Sat, 19 Oct 2013 01:02:16 +0200
Subject: [PATCH] tests that currently fail for macro paradise

---
 test/files/neg/divergent-implicit.check       | 10 ++++---
 test/files/neg/t5578.check                    |  5 +++-
 test/files/neg/t5845.check                    |  7 -----
 test/files/neg/t5845.scala                    | 16 ----------
 test/files/neg/t800.check                     |  3 +-
 test/files/pos/t5845.scala                    | 16 ++++++++++
 test/files/pos/z1730.scala                    | 13 ---------
 test/files/run/t5923a/Macros_1.scala          | 42 +++++++++++++++++++++++++--
 test/files/scalap/typeAnnotations/result.test |  2 +-
 9 files changed, 68 insertions(+), 46 deletions(-)
 delete mode 100644 test/files/neg/t5845.check
 delete mode 100644 test/files/neg/t5845.scala
 create mode 100644 test/files/pos/t5845.scala
 delete mode 100644 test/files/pos/z1730.scala

diff --git a/test/files/neg/divergent-implicit.check b/test/files/neg/divergent-implicit.check
index 5f20df1b91..759823d6a9 100644
--- a/test/files/neg/divergent-implicit.check
+++ b/test/files/neg/divergent-implicit.check
@@ -7,12 +7,14 @@ divergent-implicit.scala:5: error: diverging implicit expansion for type Int =>
 starting with method cast in object Test1
   val x2: String = cast[Int, String](1)
                                     ^
-divergent-implicit.scala:14: error: diverging implicit expansion for type Test2.Baz => Test2.Bar
-starting with method baz2bar in object Test2
+divergent-implicit.scala:14: error: type mismatch;
+ found   : Test2.Foo
+ required: Test2.Bar
   val x: Bar = new Foo
                ^
-divergent-implicit.scala:15: error: diverging implicit expansion for type Test2.Foo => Test2.Bar
-starting with method foo2bar in object Test2
+divergent-implicit.scala:15: error: type mismatch;
+ found   : Test2.Baz
+ required: Test2.Bar
   val y: Bar = new Baz
                ^
 four errors found
diff --git a/test/files/neg/t5578.check b/test/files/neg/t5578.check
index d803adb223..56123d2e0f 100644
--- a/test/files/neg/t5578.check
+++ b/test/files/neg/t5578.check
@@ -1,4 +1,7 @@
-t5578.scala:33: error: No Manifest available for T.
+t5578.scala:33: error: type mismatch;
+ found   : NumericOpsExp.this.Plus[T]
+ required: NumericOpsExp.this.Rep[T]
+    (which expands to)  NumericOpsExp.this.Exp[T]
   def plus[T: Numeric](x: Rep[T], y: Rep[T]): Rep[T] = Plus[T](x,y)
                                                               ^
 one error found
diff --git a/test/files/neg/t5845.check b/test/files/neg/t5845.check
deleted file mode 100644
index 8c6100d6de..0000000000
--- a/test/files/neg/t5845.check
+++ /dev/null
@@ -1,7 +0,0 @@
-t5845.scala:9: error: value +++ is not a member of Int
-  println(5 +++ 5)
-            ^
-t5845.scala:15: error: value +++ is not a member of Int
-  println(5 +++ 5)
-            ^
-two errors found
diff --git a/test/files/neg/t5845.scala b/test/files/neg/t5845.scala
deleted file mode 100644
index 823c722c14..0000000000
--- a/test/files/neg/t5845.scala
+++ /dev/null
@@ -1,16 +0,0 @@
-class Num[T] {
-  def mkOps = new Ops
-  class Ops { def +++(rhs: T) = () }
-}
-
-class A {
-  implicit def infixOps[T, CC[X] <: Num[X]](lhs: T)(implicit num: CC[T]) = num.mkOps
-  implicit val n1 = new Num[Int] { }
-  println(5 +++ 5)
-}
-
-class B {
-  implicit def infixOps[T, CC[X] <: Num[X]](lhs: T)(implicit num: CC[T]) : CC[T]#Ops = num.mkOps
-  implicit val n1 = new Num[Int] {}
-  println(5 +++ 5)
-}
diff --git a/test/files/neg/t800.check b/test/files/neg/t800.check
index 8ba95fddde..37a0c6f324 100644
--- a/test/files/neg/t800.check
+++ b/test/files/neg/t800.check
@@ -5,8 +5,7 @@ t800.scala:8: error: method qualification is defined twice
   conflicting symbols both originated in file 't800.scala'
   val qualification = false;
       ^
-t800.scala:12: error: value qualification is defined twice
-  conflicting symbols both originated in file 't800.scala'
+t800.scala:12: error: qualification is already defined as value qualification
   var qualification = false;
       ^
 t800.scala:16: error: method qualification is defined twice
diff --git a/test/files/pos/t5845.scala b/test/files/pos/t5845.scala
new file mode 100644
index 0000000000..823c722c14
--- /dev/null
+++ b/test/files/pos/t5845.scala
@@ -0,0 +1,16 @@
+class Num[T] {
+  def mkOps = new Ops
+  class Ops { def +++(rhs: T) = () }
+}
+
+class A {
+  implicit def infixOps[T, CC[X] <: Num[X]](lhs: T)(implicit num: CC[T]) = num.mkOps
+  implicit val n1 = new Num[Int] { }
+  println(5 +++ 5)
+}
+
+class B {
+  implicit def infixOps[T, CC[X] <: Num[X]](lhs: T)(implicit num: CC[T]) : CC[T]#Ops = num.mkOps
+  implicit val n1 = new Num[Int] {}
+  println(5 +++ 5)
+}
diff --git a/test/files/pos/z1730.scala b/test/files/pos/z1730.scala
deleted file mode 100644
index 0c5875a818..0000000000
--- a/test/files/pos/z1730.scala
+++ /dev/null
@@ -1,13 +0,0 @@
-// /scala/trac/z1730/a.scala
-// Wed May 23 07:41:25 PDT 2012
-
-class X[R] {
-  def xx(value: => R, addTweak: Boolean = true) = 0
-}
-
-class Boo {
-  implicit def toX[R](v: R) : X[R] = null
-  def goo2 {
-    3.xx(34)
-  }
-}
diff --git a/test/files/run/t5923a/Macros_1.scala b/test/files/run/t5923a/Macros_1.scala
index 6d21362c4d..97076eb102 100644
--- a/test/files/run/t5923a/Macros_1.scala
+++ b/test/files/run/t5923a/Macros_1.scala
@@ -7,8 +7,46 @@ object C {
 }
 
 object Macros {
-  def impl[T: c.WeakTypeTag](c: Context) = {
+  def impl[T](c: Context)(ttag: c.WeakTypeTag[T]) = {
     import c.universe._
-    reify(C[T](c.literal(weakTypeOf[T].toString).splice))
+    val ttag0 = ttag;
+    {
+      // When we're expanding implicitly[C[Nothing]], the type inferencer will see
+      // that foo[T] returns C[T] and that we request an implicit of type C[Nothing].
+      //
+      // Then the type inferencer will try to match C[T] against C[Nothing] and infer everything it can infer
+      // from that match, but not more (e.g. if we were returning Iso[T, U] and the type we were looking at was Iso[Foo, L],
+      // we wouldn't want U to be auto-inferred to Nothing, as it usually happens with normal methods,
+      // but would rather want it to remain unknown, so that our macro could take a stab at inferring it:
+      // see the comments in this commit for more information).
+      //
+      // Equipped with common sense, in our case of C[T] and C[Nothing] we would expect T to be inferred as Nothing, and then we
+      // would expect T in the corresponding macro invocation to be Nothing. Unfortunately it is not that simple.
+      //
+      // Internally the type inferencer uses Nothing as a dummy value, which stands for "don't know how to
+      // infer this type parameter". In the Iso example, matching Iso[T, U] against Iso[Foo, L] would result in
+      // T being inferred as Foo and U being inferred as Nothing (!!). Then the type inferencer will think:
+      // "Aha! U ended up being Nothing. This means that I failed to infer it,
+      // therefore the result of my work is: T -> Foo, U -> still unknown".
+      //
+      // That's all very good and works very well until Nothing is a genuine result of type inference,
+      // as in our original example of inferring T in C[T] from C[Nothing]. In that case, the inferencer becomes confused
+      // and here in the macro implementation we get weakTypeOf[T] equal to some dummy type carrying a type parameter
+      // instead of Nothing.
+      //
+      // This eccentric behavior of the type inferencer is a long-standing problem in scalac,
+      // so the best one can do for now until it's fixed is to work around, manually converting
+      // suspicious T's into Nothings. Of course, this means that we would have to approximate,
+      // because there's no way to know whether having T here stands for a failed attempt to infer Nothing
+      // or for a failed attempt to infer anything, but at least we're in full control of making the best
+      // of this sad situation.
+      implicit def ttag: WeakTypeTag[T] = {
+        val tpe = ttag0.tpe
+        val sym = tpe.typeSymbol.asType
+        if (sym.isParameter && !sym.isSkolem) TypeTag.Nothing.asInstanceOf[TypeTag[T]]
+        else ttag0
+      }
+      reify(C[T](c.literal(weakTypeOf[T].toString).splice))
+    }
   }
 }
\ No newline at end of file
diff --git a/test/files/scalap/typeAnnotations/result.test b/test/files/scalap/typeAnnotations/result.test
index 407b0235c6..69129d6d26 100644
--- a/test/files/scalap/typeAnnotations/result.test
+++ b/test/files/scalap/typeAnnotations/result.test
@@ -1,8 +1,8 @@
 abstract class TypeAnnotations[@scala.specialized R] extends scala.AnyRef {
   def this() = { /* compiled code */ }
   @scala.specialized
-  val x : scala.Int = { /* compiled code */ }
   @scala.specialized
   type T
   def compose[@scala.specialized A](x : A, y : R) : A = { /* compiled code */ }
+  val x : scala.Int = { /* compiled code */ }
 }
-- 
1.8.4

